clear;

%load, trim and sort the data set
Moviedatat = 'Dataset\ml-100k\u.data';
Moviedatat = dlmread(Moviedatat, '\t');
Moviedatat = Moviedatat(:, 1:3);
[Y, I] = sort(Moviedatat(:, 1));
Moviedata = Moviedatat(I, :);

% Instantiate training and test set matrices

k = 10;

% split dataset
N = size(Moviedata, 1);
NumTest = 9430;
NumTrain = N - NumTest;
TrainingSet = zeros(NumTrain, 3);
TrainingMatrix = zeros(1, max(Moviedata(:,2)));
TestSet = zeros(NumTest, 3);
TestMatrix = zeros(1, max(Moviedata(:,2)));
i_test = 1;
i_train = 1;
userid = -1;
for n = 1 : N
    prevuserid = userid;
    userid = Moviedata(n, 1);
    if userid > prevuserid
        count = 0;
    end
    
    movieid = Moviedata(n, 2);
    rating = Moviedata(n, 3);
    
    if count >= k
        TrainingSet(i_train, 1) = userid;
        TrainingSet(i_train, 2) = movieid;
        TrainingSet(i_train, 3) = rating;
        TrainingMatrix(userid, movieid) = rating;
        i_train = i_train + 1;
    else
        TestSet(i_test, 1) = userid;
        TestSet(i_test, 2) = movieid;
        TestSet(i_test, 3) = rating;
        TestMatrix(userid, movieid) = rating;
        i_test = i_test + 1;
        count = count + 1;
    end
end

% Calculate the average rating of users
Rhat = zeros(userid, 1);
Counts = zeros(userid, 1);
for n = 1 : size(TrainingSet, 1)
    userid = TrainingSet(n, 1);
    Rhat(userid, 1) = Rhat(userid, 1) + TrainingSet(n, 3);
    Counts(userid, 1) = Counts(userid, 1) + 1;
end
for u = 1 : size(Rhat, 1)
   Rhat(u, 1) = Rhat(u, 1) / Counts(u, 1); 
end

% Get Index of users who rated the different movies
% ,and get the index of movies rated by different users

IndexOfMoviesRatedByEachUser = zeros(size(TrainingMatrix, 1), 1);
IndexOfUsersWhoRatedMovies = zeros(size(TrainingMatrix, 2), 1);
NextIndexIOUWRM = ones(size(TrainingMatrix, 2), 1);
NextIndexIOMRBEU = ones(size(TrainingMatrix, 1), 1);

for n = 1 : size(TrainingMatrix, 1) % user index
   for m = 1 : size(TrainingMatrix, 2) % movie index
      rating = TrainingMatrix(n, m);
      NIm = NextIndexIOUWRM(m, 1);
      NIn = NextIndexIOMRBEU(n, 1);
      if rating > 0
         IndexOfUsersWhoRatedMovies(m, NIm) = n;
         NextIndexIOUWRM(m, 1) = NextIndexIOUWRM(m, 1) + 1;
         IndexOfMoviesRatedByEachUser(n, NIn) = m;
         NextIndexIOMRBEU(n, 1) = NextIndexIOMRBEU(n, 1) + 1;
      end
   end
end




NextIndexIOUWRM = ones(size(TrainingMatrix, 1), 1);



P = TrainingMatrix;

for u = 1 : size(TrainingMatrix, 1)
   for i = 1 : size(TrainingMatrix, 2)
      %Prematurely set P
      P(u, i) = -1;
      if TrainingMatrix(u, i) == 0
          % Get N
          N = IndexOfMoviesRatedByEachUser(u, :);
          % Remove zeros
          N = N(N~=0);
          Numerator = 0;
          Denominator = 0;
          for n = N
              U_i = IndexOfUsersWhoRatedMovies(i, :);
              U_n = IndexOfUsersWhoRatedMovies(n, :);
              U = intersection(U_i, U_n);
              U = U(U ~= 0);
              if ~isempty(U)
                
              end
          end
          
          if Numerator ~= 0 && Denominator ~= 0
             P(u, i) = Numerator / Denominator; 
          end
      else
          
      end 
   end
end

clearvars i NextIndexIOMRBEU NextIndexIOUWRM NIm NIn i_test i_train m movieid n N u userid rating prevuserid count Moviedata Moviedatat I Y;










